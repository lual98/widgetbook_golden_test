import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:widgetbook/widgetbook.dart';
import 'package:widgetbook_golden_test/src/golden_play_action.dart';
import 'package:widgetbook_golden_test/src/ignore_network_image_exception.dart';
import 'package:widgetbook_golden_test/src/test_http_overrides.dart';
import 'package:widgetbook_golden_test/src/widget_tester_extension.dart';
import 'package:widgetbook_golden_test/src/widgetbook_golden_test_builder.dart';
import 'package:widgetbook_golden_test/src/widgetbook_golden_tests_properties.dart';

/// Creates and runs a golden test of the given Widgetbook [useCase].
/// The golden snapshot is saved in [goldenSnapshotsOutputPath]
void createGoldenTest(
  WidgetbookUseCase useCase,
  String goldenSnapshotsOutputPath,
  WidgetbookGoldenTestsProperties properties,
) {
  // Skip the golden test case if it contains the [skip-golden] tag.
  bool shouldSkip = useCase.name.contains(properties.skipTag);

  // Golden test case of the story.
  testWidgets(useCase.name, (widgetTester) async {
    await HttpOverrides.runZoned(() async {
      final previousOnError = FlutterError.onError;
      FlutterError.onError = (FlutterErrorDetails details) {
        // Ignore image loading errors for generated by the mocked http client.
        handleError(details, properties, previousOnError);
      };

      late Widget widgetToTest;
      try {
        widgetToTest = await widgetTester.pumpWidgetbookCase(
          properties,
          useCase,
        );
      } finally {
        // Restore the previous error handler
        FlutterError.onError = previousOnError;
      }

      await expectLater(
        find.byType(widgetToTest.runtimeType).first,
        matchesGoldenFile("$goldenSnapshotsOutputPath/${useCase.name}.png"),
      );

      try {
        WidgetbookGoldenTestBuilder goldenTestBuilder = widgetTester
            .firstWidget(find.byType(WidgetbookGoldenTestBuilder));

        if (goldenTestBuilder.goldenActions != null) {
          for (final play in goldenTestBuilder.goldenActions!) {
            await validatePlayFunction(
              widgetTester,
              properties,
              useCase,
              play,
              widgetToTest,
              goldenSnapshotsOutputPath,
            );
          }
        }
      } catch (_) {
        // Golden Test Builder was not found, continue normally.
      }
    }, createHttpClient: (_) => createHttpClient(properties));
  }, skip: shouldSkip);
}

Future<void> validatePlayFunction(
  WidgetTester widgetTester,
  WidgetbookGoldenTestsProperties properties,
  WidgetbookUseCase useCase,
  GoldenPlayAction play,
  Widget widgetToTest,
  String goldenSnapshotsOutputPath,
) async {
  await widgetTester.pumpWidgetbookCase(properties, useCase);
  await play.callback(widgetTester, find);
  await widgetTester.pumpAndSettle();
  Finder goldenFinder =
      play.goldenFinder == null
          ? find.byType(widgetToTest.runtimeType).first
          : play.goldenFinder!.call(find);
  await expectLater(
    goldenFinder,
    matchesGoldenFile(
      "$goldenSnapshotsOutputPath/${useCase.name} - ${play.name}.png",
    ),
  );
}

@visibleForTesting
void handleError(
  FlutterErrorDetails details,
  WidgetbookGoldenTestsProperties properties,
  Function(FlutterErrorDetails)? previousOnError,
) {
  // Ignore image loading errors for generated by the mocked http client.
  if (details.exception is IgnoreNetworkImageException) {
    return;
  }

  if (properties.onTestError != null) {
    properties.onTestError!(details, previousOnError);
  } else {
    previousOnError?.call(details);
  }
}
