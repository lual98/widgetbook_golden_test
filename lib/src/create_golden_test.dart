import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mocktail/mocktail.dart';
import 'package:widgetbook/widgetbook.dart';
import 'package:widgetbook_golden_test/src/ignore_network_image_exception.dart';
import 'package:widgetbook_golden_test/src/test_utils.dart';
import 'package:widgetbook_golden_test/src/widgetbook_golden_tests_properties.dart';

class _WidgetbookStateMock extends Mock implements WidgetbookState {}

/// Creates and runs a golden test of the given Widgetbook [useCase].
/// The golden snapshot is saved in [goldenSnapshotsOutputPath]
void createGoldenTest(
  WidgetbookUseCase useCase,
  String goldenSnapshotsOutputPath,
  WidgetbookGoldenTestsProperties properties,
) {
  // Skip the golden test case if it contains the [skip-golden] tag.
  bool shouldSkip = useCase.name.contains(properties.skipTag);

  // Golden test case of the story.
  testWidgets(useCase.name, (widgetTester) async {
    late Widget widgetToTest;
    final previousOnError = FlutterError.onError;
    FlutterError.onError = (FlutterErrorDetails details) {
      // Ignore image loading errors for generated by the mocked http client.
      if (details.exception is IgnoreNetworkImageException) {
        return;
      }
      previousOnError?.call(details);
    };

    var widgetbookStateMock = _WidgetbookStateMock();
    when(() => widgetbookStateMock.queryParams).thenReturn({});
    when(
      () => widgetbookStateMock.knobs,
    ).thenReturn(KnobsRegistry(onLock: () {}));
    when(() => widgetbookStateMock.addons).thenReturn(properties.addons);
    Widget baseWidget = WidgetbookScope(
      state: widgetbookStateMock,
      child: MaterialApp(
        locale: properties.locale,
        localizationsDelegates: properties.localizationsDelegates,
        theme: properties.theme,
        home: Scaffold(
          body: Builder(
            builder: (context) {
              widgetToTest = useCase.builder(context);
              return widgetToTest;
            },
          ),
        ),
      ),
    );

    await widgetTester.pumpWidget(baseWidget);
    await widgetTester.pumpAndSettle();
    await precacheImagesAndWait(widgetTester, properties);
    await widgetTester.pumpAndSettle();

    await expectLater(
      find.byType(widgetToTest.runtimeType).first,
      matchesGoldenFile("$goldenSnapshotsOutputPath/${useCase.name}.png"),
    );

    // Restore the previous error handler
    FlutterError.onError = previousOnError;
  }, skip: shouldSkip);
}
